{{ ansible_managed | comment }}
#
# /etc/systemd/system/rsyslog.service.d/hardening.conf
#
# FIXME!
# rsyslog.service: Preparation of eBPF allow maps failed: Operation not permitted
[Service]
# Hardening
# Warning! Test to your context
NoNewPrivileges=yes
{% if ansible_distribution == 'Ubuntu' and ansible_distribution_major_version|int >= 24 %}
# PrivateTmp=true
# ProtectHome=true
# ProtectSystem=true
# ProtectProc=noaccess
# PrivateDevices=yes
UMask=077
# ReadWritePaths=/var/log /run/systemd/journal/syslog /run/systemd/journal/dev-log /run/systemd/journal/syslog /run/systemd/notify /run/systemd/userdb/io.systemd.DynamicUser
# ReadOnlyPaths=/proc/kmsg
# InaccessiblePaths=/proc
# ProtectKernelTunables=true
# ProtectKernelModules=yes
# ProtectKernelLogs=yes
ProtectHostname=yes
ProtectClock=yes
# ProtectControlGroups=true
# LockPersonality=true
RestrictRealtime=true
RestrictNamespaces=yes
RestrictSUIDSGID=yes
MemoryDenyWriteExecute=yes

# PrivateNetwork=yes
RestrictAddressFamilies=AF_INET AF_INET6 AF_UNIX
RestrictAddressFamilies=~AF_NETLINK AF_PACKET
{% else %}
# Exposure level 2.4
PrivateTmp=true
ProtectHome=true
ProtectSystem=true
{% if (ansible_distribution == 'Ubuntu' and ansible_distribution_major_version|int >= 21) or
      (ansible_distribution == 'Debian' and ansible_distribution_major_version|int >= 11)
%}
ProtectProc=noaccess
{% endif %}

PrivateDevices=yes
DeviceAllow=

PrivateUsers=false
DynamicUser=false

UMask=077

ReadWritePaths=/var/log /run/systemd/journal/syslog /run/systemd/journal/dev-log /run/systemd/journal/syslog /run/systemd/notify /run/systemd/userdb/io.systemd.DynamicUser
ReadOnlyPaths=/proc/kmsg
# InaccessiblePaths=/proc

ProtectKernelTunables=true
ProtectKernelModules=yes
ProtectKernelLogs=yes
ProtectHostname=yes
ProtectClock=yes
ProtectControlGroups=true
LockPersonality=true
RestrictRealtime=true
RestrictNamespaces=yes
RestrictSUIDSGID=yes
MemoryDenyWriteExecute=yes

PrivateNetwork=yes
RestrictAddressFamilies=AF_UNIX
# If using remote syslog, likely required
#RestrictAddressFamilies=AF_INET AF_INET6 AF_UNIX
RestrictAddressFamilies=~AF_NETLINK AF_PACKET
{% endif %}

IPAccounting=yes
IPAddressAllow=localhost link-local multicast 10.0.0.0/8 192.168.0.0/16
# IPAddressDeny=

AmbientCapabilities=CAP_BPF CAP_PERFMON
CapabilityBoundingSet=~CAP_AUDIT_CONTROL CAP_AUDIT_READ CAP_DAC_READ_SEARCH
CapabilityBoundingSet=~CAP_SYS_RAWIO
CapabilityBoundingSet=~CAP_SYS_PTRACE
CapabilityBoundingSet=~CAP_DAC_* CAP_FOWNER CAP_IPC_OWNER
CapabilityBoundingSet=~CAP_NET_ADMIN
CapabilityBoundingSet=~CAP_KILL
CapabilityBoundingSet=~CAP_NET_BIND_SERVICE CAP_NET_BROADCAST
CapabilityBoundingSet=~CAP_SYS_NICE CAP_SYS_RESOURCE
CapabilityBoundingSet=~CAP_SYS_BOOT
CapabilityBoundingSet=~CAP_LINUX_IMMUTABLE
CapabilityBoundingSet=~CAP_SYS_CHROOT
CapabilityBoundingSet=~CAP_BLOCK_SUSPEND
CapabilityBoundingSet=~CAP_LEASE
CapabilityBoundingSet=~CAP_SYS_PACCT
CapabilityBoundingSet=~CAP_SYS_TTY_CONFIG
CapabilityBoundingSet=~CAP_SYS_ADMIN
# CapabilityBoundingSet=~CAP_SETUID CAP_SETGID CAP_SETPCAP
CapabilityBoundingSet=~CAP_FSETID CAP_SETFCAP
CapabilityBoundingSet=~CAP_NET_RAW
CapabilityBoundingSet=~CAP_IPC_LOCK

{% if not (ansible_virtualization_type is defined and
          (ansible_virtualization_type == "lxc" or ansible_virtualization_type == "docker")
        )
%}
SystemCallFilter=@system-service @privileged @resources
{% endif %}
SystemCallFilter=~@debug @mount @cpu-emulation @obsolete @clock @swap @reboot @module
SystemCallArchitectures=native
# When system call is disallowed, return error code instead of killing process
SystemCallErrorNumber=EPERM

{% if rsyslog_cgroups_restriction_enable is defined and rsyslog_cgroups_restriction_enable|bool %}
CPUWeight={{ rsyslog_cgroups_cpushares | default('1024') }}
CPUQuota={{ rsyslog_cgroups_cpuquota | default('40%') }}
MemoryMax={{ rsyslog_cgroups_memorylimit | default('4G') }}
{% endif %}
